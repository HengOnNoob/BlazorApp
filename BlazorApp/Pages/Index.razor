@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@using BlazorApp.Data
@inject StockService stockService;
@using System.Timers;

<PageTitle>Index</PageTitle>
<input type="button" id="open" value="Start" @onclick="StartStock" />
<input type="button" id="close" value="Stop" @onclick="StopStock" />
<input type="button" id="reset" value="Reset" @onclick="ResetStock" />
@if (stockService.GetAllStocks().Count == 0)
{
    <b>NO Count</b>
}
else
{
    <table class='table'>
        <thead>
            <tr>
                <th>Position ID</th>
                <th>Ticker</th>
                <th>Spot Price</th>
                <th>Qty [T-1]</th>
                <th>Qty [T-0]</th>
                <th>Qty Change</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var s in stockService.GetAllStocks())
            {
                <tr>
                    <td>@s.pos</td>
                    <td>@s.ticker</td>
                    <td>@s.spotPrice</td>
                    <td>@s.QtyPrev</td>
                    <td>@s.QtyNext</td>
                    <td>@s.QtyChg</td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private Timer timer;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        timer = new Timer();
        timer.Interval = 1000;
        timer.Elapsed += OnTimerElapsed;
        timer.Enabled = true;

    }

    private void OnTimerElapsed(object? sender, ElapsedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/stockhub"))
            .Build();

        await hubConnection.StartAsync();
    }

    private async Task ResetStock()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Reset");
        }
    }

    private async Task StartStock()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("StartStockMovement");
        }
    }

    private async Task StopStock()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("StopStockMovement");
        }
    }

    public bool IsConnected =>
    hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

    @*@page "/"

<SfStockChart>
    <StockChartSeriesCollection>
        <StockChartSeries DataSource="@StockDetails" Type="ChartSeriesType.Candle" XName="Date" YName="Close" High="High"
        Low="Low" Open="Open" Close="Close" Volume="Volume">
        </StockChartSeries>
    </StockChartSeriesCollection>

</SfStockChart>

@code {
    public class StockChartData
    {
        public DateTime Date { get; set; }
        public Double Open { get; set; }
        public Double Low { get; set; }
        public Double Close { get; set; }
        public Double High { get; set; }
        public Double Volume { get; set; }
    }

    public List<StockChartData> StockDetails = new List<StockChartData>
    {
        new StockChartData { Date = new DateTime(2012, 04, 02), Open = 85.9757, High = 90.6657, Low = 85.7685, Close = 90.5257, Volume = 660187068},
        new StockChartData { Date = new DateTime(2012, 04, 09), Open = 89.4471, High = 92, Low = 86.2157, Close = 86.4614, Volume = 912634864},
        new StockChartData { Date = new DateTime(2012, 04, 16), Open = 87.1514, High = 88.6071, Low = 81.4885, Close = 81.8543, Volume = 1221746066},
        new StockChartData { Date = new DateTime(2012, 04, 23), Open = 81.5157, High = 88.2857, Low = 79.2857, Close = 86.1428, Volume = 965935749},
        new StockChartData { Date = new DateTime(2012, 04, 30), Open = 85.4, High =  85.4857, Low = 80.7385, Close = 80.75, Volume = 615249365},
        new StockChartData { Date = new DateTime(2012, 05, 07), Open = 80.2143, High = 82.2685, Low = 79.8185, Close = 80.9585, Volume = 541742692},
        new StockChartData { Date = new DateTime(2012, 05, 14), Open = 80.3671, High = 81.0728, Low = 74.5971, Close = 75.7685, Volume = 708126233},
        new StockChartData { Date = new DateTime(2012, 05, 21), Open = 76.3571, High = 82.3571, Low = 76.2928, Close = 80.3271, Volume = 682076215},
        new StockChartData { Date = new DateTime(2012, 05, 28), Open = 81.5571, High = 83.0714, Low = 80.0743, Close = 80.1414, Volume = 480059584},
    };
}
}*@

    @*<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<Counter IncrementAmount="10"/>*@