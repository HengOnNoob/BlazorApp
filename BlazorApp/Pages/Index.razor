@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@using BlazorApp.Data
@inject StockService stockService;
@using System.Timers;

<PageTitle>Index</PageTitle>
<input type="button" id="open" value="Start" @onclick="StartStock" />
<input type="button" id="close" value="Stop" @onclick="StopStock" />
<input type="button" id="reset" value="Reset" @onclick="ResetStock" />
@if (stockService.GetAllStocks().Count == 0)
{
    <b>NO Count</b>
}
else
{
    <table class='table'>
        <thead>
            <tr>
                <th @onclick="() => ChangeOrder(1)">Position ID</th>
                <th @onclick="() => ChangeOrder(2)">Ticker</th>
                <th>Spot Price</th>
                <th @onclick="() => ChangeOrder(4)">Qty [T-1]</th>
                <th @onclick="() => ChangeOrder(5)">Qty [T-0]</th>
                <th @onclick="() => ChangeOrder(6)">Qty Change</th>
                <th @onclick="() => ChangeOrder(7)">Qty Sum</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var s in stockService.GetAllStocks(@order))
            {
                <tr>
                    <td>@s.pos</td>
                    <td>@s.ticker</td>
                    <td>@s.spotPrice</td>
                    <td>@s.QtyPrev</td>
                    <td>@s.QtyNext</td>
                    <td style="color:@TextColor(s.QtyChg);">@s.QtyChg</td>
                    <td>@s.QtySum</td>
                </tr>
            }
        </tbody>
    </table>
}
<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>


@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private int order = 1;

    protected override void OnInitialized()
    {
        base.OnInitialized();


    }

    private string TextColor(int Qty)
    {
        switch (Qty >= 0)
        {
            case true:
                return "green";
            case false:
                return "red";
        }
    }

    private void ChangeOrder(int req)
    {
        order = req;
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/stockhub"))
            .Build();

        hubConnection.On<string, string>("QtyChange", (stock, qty) =>
    {
        var encodedMsg = $"{stock}: {qty}";
        messages.Add(encodedMsg);
        InvokeAsync(StateHasChanged);
    });

        await hubConnection.StartAsync();
    }

    private async Task ResetStock()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Reset");
            order = 1;
            messages.Clear();
        }
    }

    private async Task StartStock()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("StartStockMovement");
        }
    }

    private async Task StopStock()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("StopStockMovement");
        }
    }

    public bool IsConnected =>
    hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
